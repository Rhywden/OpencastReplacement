@using OpencastReplacement.Data
@using System.Security.Claims
@using OpencastReplacement.Helpers
@using OpencastReplacement.Models
@using OpencastReplacement.Store
@using RudderSingleton
@using System.Collections.Immutable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@inject IDialogService DialogService
@inject IMongoConnection MongoConnection

@inherits StateComponent<AppState>

<MudPaper Class="pa-4 ma-3" Elevation="8">
    <MudGrid>
        <MudItem xs="9" md="10" lg="4">
            <MudAutocomplete @bind-Value="value"
            @ref="autocomplete"
            Label="Suche"
            T="string" 
            SearchFunc="Search" 
            CoerceValue="true" 
            AdornmentIcon="@Icons.Material.Filled.Search"
            ResetValueOnEmptyText="false" />
        </MudItem>
        <MudItem xs="3" md="2" lg="1">
            <MudButton OnClick="ResetSearch" Variant="Variant.Outlined">Reset</MudButton>
        </MudItem>
        <MudItem xs="12" md="4" lg="2">
            <MudCheckBox T="bool" @bind-Checked="@showOnlyOwnVideos" Label="Nur eigene Videos zeigen"></MudCheckBox>
        </MudItem>
        <MudItem xs="12" md="4" lg="2">
            <MudCheckBox T="bool" @bind-Checked="@showSelector" Label="Videos für Serie aussuchen"></MudCheckBox>
        </MudItem>
        <MudItem xs="12" md="4" lg="2">
            <MudButton Variant="Variant.Filled" Disabled="(selectedIds.Count == 0)" OnClick="() => OpenCreateSeriesDialog()">Serie erstellen</MudButton>
        </MudItem>
    </MudGrid>

</MudPaper>


@foreach(var vid in _videosFilteredByOwner)
{
    <MudPaper Class="pa-3 ma-3">
        <MudGrid>
            <MudItem xs="6" md="5">
                @if(showSelector)
                {
                    <MudCheckBox T="bool" Checked="(IsSelected(vid))" CheckedChanged="(() => ToggleSelection(vid))"></MudCheckBox>
                }
                @vid.Titel (@vid.FileName)
            </MudItem>
            <MudItem xs="6" md="3">
                @vid.UserId
            </MudItem>
            <MudItem xs="6" md="2">
                @(vid.Width)x@(vid.Height)
            </MudItem>
            <MudItem xs="6" md="2">
                @(vid.Duration.Hours)h:@(vid.Duration.Minutes)m:@(vid.Duration.Seconds)s (@ByteToMegabyte(@vid.FileSize) MB)
            </MudItem>
            <MudItem xs="12">
                @foreach(var tag in vid.Tags)
                {
                    <MudChip T="string" Color="Color.Default" OnClick="() => OnChipClick(tag)" >@tag</MudChip>
                }
            </MudItem>
            <MudItem xs="6" md="4">
                <MudButton Variant="Variant.Outlined" OnClick="(() => LinkToClipboard(vid.Id))">Direktlink kopieren</MudButton>
            </MudItem>
            <MudItem xs="6" md="4">
                <MudButton Variant="Variant.Filled" OnClick="(() => EmbedToClipboard(vid))">Embedcode kopieren</MudButton>
            </MudItem>
            <MudItem xs="12" md="4">
                @if(@vid.Public) {
                    <MudIconButton Icon="@Icons.Material.Filled.Public"></MudIconButton>
                } else {
                    <MudIconButton Icon="@Icons.Material.Filled.PublicOff"></MudIconButton>
                }
                <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled" Href=@($"{baseUrl}/Video?id={vid.Id}") Color="Color.Secondary"></MudIconButton>
                @if (vid.UserId.Equals(user?.Identity?.Name))
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="(() => OpenEditDialog(vid))" Color="Color.Info"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(() => DeleteVideo(vid))" Color="Color.Warning"></MudIconButton>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
}





@code {
    private ClaimsPrincipal? user;
    private StringEqualityComparer comparer = new();
    private List<string> list = new();
    private MudAutocomplete<string>? autocomplete;
    private bool showOnlyOwnVideos = true;
    private List<Video> selectedIds = new();

    private ImmutableList<Video> _videos = ImmutableList<Video>.Empty;
    private ImmutableList<Video> _videosFiltered => (string.IsNullOrWhiteSpace(value)) ? _videos : ImmutableList<Video>.Empty.AddRange(_videos.Where(v => (v.Beschreibung ?? string.Empty).Contains(value, StringComparison.InvariantCultureIgnoreCase) || (v.Titel ?? string.Empty).Contains(value, StringComparison.InvariantCultureIgnoreCase) || v.FileName.Contains(value, StringComparison.InvariantCultureIgnoreCase) || v.Tags.Contains(value, (IEqualityComparer<string>)comparer)));
    private ImmutableList<Video> _videosFilteredByOwner => showOnlyOwnVideos ? ImmutableList<Video>.Empty.AddRange(_videosFiltered.Where(v => v.UserId.Equals(user?.Identity?.Name))) : _videosFiltered;

    private ImmutableList<Tag> _tags = ImmutableList<Tag>.Empty;

    private bool showSelector = false;

    private string? value;

    private string baseUrl => System.Environment.GetEnvironmentVariable("APP_URL") ?? string.Empty;

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        UseState(state => _videos = state.Videos);
        UseState(state => _tags = state.Tags);
    }

    private string IdToKeyVideoList(Guid id)
    {
        return $"videolist_{id}";
    }

    private void OnChipClick(string tag)
    {
        value = tag;
        StateHasChanged();
    }

    private async void ResetSearch()
    {
        value = string.Empty;
        if(autocomplete is not null) {
            await autocomplete.ClearAsync();
            await autocomplete.ResetAsync();
        }
        StateHasChanged();
    }

    private string ByteToMegabyte(long bytes)
    {
        return String.Format("{0:0.00}", bytes / (1024.0 * 1024.0));
    }

    private void ToggleSelection(Video vid)
    {
        if(selectedIds.Contains(vid))
        {
            selectedIds.Remove(vid);
        } else
        {
            selectedIds.Add(vid);
        }
    }
    private bool IsSelected(Video vid) => selectedIds.Contains(vid);

    private async Task LinkToClipboard(Guid id)
    {
        string link = $"{baseUrl}/Video?id={id}";
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", link);
        //Snackbar.Add("Id in die Zwischenablage kopiert!");
    }

    private async void DeleteVideo(Video video)
    {
        bool? result = await DialogService.ShowMessageBox("Warnung", "Das Video wird permanent gelöscht!", yesText: "Löschen!", noText: null, cancelText: "Abbrechen");
        if(result == true)
        {
            Put(new Actions.DeleteVideo.Request(video));
            StateHasChanged();
        }
    }

    private async Task OpenEditDialog(Video video)
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };
        var parameters = new DialogParameters { ["thisVideo"] = video };
        var dialog = await DialogService.ShowAsync<VideoDialog>("Informationen zum Video", parameters, options);
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            var content = (Video)result.Data;
            foreach(string videotag in content.Tags)
            {
                int index = _tags.FindIndex(t => t.Name.Equals(videotag));
                if(index < 0)
                {
                    var tag = new Tag
                        {
                            IsPrivate = true,
                            Name = videotag,
                            UserId = user?.Identity?.Name ?? string.Empty
                        };
                    Put(new Actions.AddTag.Request(tag));
                }
            }
            Put(new Actions.UpdateVideo.Request(content));
        }
    }

    private async Task OpenCreateSeriesDialog()
    {
        var vids = ImmutableList<Video>.Empty.AddRange(this.selectedIds);
        var series = new Series
        {
            Videos = vids
        };

        var parameters = new DialogParameters { ["Series"] = series };
        var dialog = await DialogService.ShowAsync<CreateSeriesDialog>("Neue Serie erstellen", parameters);

        var result = await dialog.Result;

        if(!result.Canceled)
        {
            var content = (Series)result.Data;
            Put(new Actions.AddSeries.Request(content));
            selectedIds = new();
            StateHasChanged();
        }
    }

    private async Task EmbedToClipboard(Video vid)
    {
        int newHeight = vid.Height;
        int newWidth = vid.Width;

        if(newHeight > 500)
        {
            double factor = 500.0 / (double)newHeight;
            newHeight = 500;
            newWidth = (int)(newWidth * factor);
        }
        if(newWidth > 600)
        {
            double factor = 600.0 / (double)newWidth;
            newWidth = 600;
            newHeight = (int)(newHeight * factor);
        }

        string embed = $"<iframe src=\"{baseUrl}/Video?id={vid.Id}\" title=\"{vid.FileName}\" style=\"width:{newWidth}px;height:{newHeight}px\" frameborder=\"0\" scrolling=\"no\" allowfullscreen></iframe>";
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", embed);
    }

    private async Task<IEnumerable<string>> Search(string val, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(val))
        {
            return list;
        }
        return list.Where(x => x.Contains(val, StringComparison.InvariantCultureIgnoreCase));
    }
}