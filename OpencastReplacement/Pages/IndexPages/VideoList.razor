@using OpencastReplacement.Data
@using System.Security.Claims
@using OpencastReplacement.Events
@using OpencastReplacement.Helpers
@using OpencastReplacement.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDataRepository DataRepository
@inject VideoAddedEvent VideoAddedEvent
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@inject IDialogService DialogService

@implements IDisposable

<MudPaper Class="pa-3 ma-3">
    <MudGrid>
        <MudItem xs="4">
            <MudAutocomplete @bind-Value="value"
                @ref="autocomplete"
                Label="Suche"
                T="string" 
                SearchFunc="Search" 
                CoerceValue="true" 
                AdornmentIcon="@Icons.Material.Filled.Search"
                ResetValueOnEmptyText="true" />
        </MudItem>
        <MudItem xs="1">
            <MudButton OnClick="ResetSearch" Variant="Variant.Outlined">Reset</MudButton>
        </MudItem>
        <MudItem xs="2">
            <MudCheckBox @bind-Checked="@showOnlyOwnVideos" Label="Nur eigene Videos zeigen"></MudCheckBox>
        </MudItem>
        <MudItem xs="2">
            <MudCheckBox @bind-Checked="@showSelector" Label="Videos für Serie aussuchen"></MudCheckBox>
        </MudItem>
        <MudItem xs="3">
            <MudButton Variant="Variant.Filled" Disabled="(selectedIds.Count == 0)" OnClick="() => OpenCreateSeriesDialog()">Serie erstellen</MudButton>
        </MudItem>
    </MudGrid>
    
    
    
</MudPaper>

<MudSimpleTable Hover="false">
    <thead>
        <tr>
            <th></th>
            <th>Name</th>
            <th>Ersteller</th>
            <th>Größe (MB)</th>
            <th>Dauer</th>
            <th>Tags</th>
            <th>Öffentlich</th>
            <th>Auflösung</th>
            <th></th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var vid in videosFilteredByOwner)
        {
            <tr @key="IdToKeyVideoList(vid.Id)">
                <td>
                    @if(showSelector)
                    {
                        <MudCheckBox T="bool" Checked="(IsSelected(vid))" CheckedChanged="(() => ToggleSelection(vid))"></MudCheckBox>
                    }
                </td>
                <td>@vid.FileName</td>
                <td>@vid.UserId</td>
                <td>@ByteToMegabyte(@vid.FileSize)</td>
                <td>@vid.Duration.Hours:@vid.Duration.Minutes:@vid.Duration.Seconds</td>
                <td>
                    @foreach(var tag in vid.Tags)
                    {
                        <MudChip Color="Color.Default">@tag</MudChip>
                    }
                </td>
                <td>@(vid.Public ? "Öffentlich" : "Privat")</td>
                <td>@($"{vid.Width}x{vid.Height}")</td>
                <td><MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled" Link=@($"{baseUrl}/Video?id={vid.Id}") Color="Color.Secondary"></MudIconButton></td>
                <td><MudButton Variant="Variant.Outlined" OnClick="(() => LinkToClipboard(vid.Id))">Link kopieren</MudButton></td>
                <td><MudButton Variant="Variant.Filled" OnClick="(() => EmbedToClipboard(vid))">Embedcode kopieren</MudButton></td>
                <td>
                    @if (vid.UserId.Equals(user?.Identity?.Name))
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="(() => OpenEditDialog(vid))" Color="Color.Info"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(() => DeleteVideo(vid))" Color="Color.Warning"></MudIconButton>
                    }
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>


@code {
    private ClaimsPrincipal? user;
    private List<Video> videos => DataRepository.Videos.Where(vid => vid.Public || vid.UserId.Equals(user?.Identity?.Name)).ToList();
    private StringEqualityComparer comparer = new();
    private List<Video> videosFiltered => (string.IsNullOrWhiteSpace(value)) ? videos.ToList() : videos.Where(v => v.FileName.Contains(value, StringComparison.InvariantCultureIgnoreCase) || v.Tags.Contains<string>(value, comparer)).ToList();
    private List<Video> videosFilteredByOwner => showOnlyOwnVideos ? videosFiltered.Where(v => v.UserId.Equals(user?.Identity?.Name)).ToList() : videosFiltered;
    private List<string> list = new();
    private MudAutocomplete<string>? autocomplete;
    private bool showOnlyOwnVideos = true;
    private List<Guid> selectedIds = new();

    private bool showSelector = false;

    private string? value;

    private string baseUrl => Environment.IsDevelopment() ? "https://localhost:7043" : "https://video.bs18.de";

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        VideoAddedEvent.Notify += OnVideoUpdate;
    }

    private string IdToKeyVideoList(Guid id)
    {
        return $"videolist_{id}";
    }

    private void ResetSearch()
    {
        value = string.Empty;
        autocomplete?.Clear();
        StateHasChanged();
    }

    private string ByteToMegabyte(long bytes)
    {
        return String.Format("{0:0.00}", bytes / (1024.0 * 1024.0));
    }

    private async Task OnVideoUpdate(bool added)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void ToggleSelection(Video vid)
    {
        if(selectedIds.Contains(vid.Id))
        {
            selectedIds.Remove(vid.Id);
        } else
        {
            selectedIds.Add(vid.Id);
        }
    }
    private bool IsSelected(Video vid) => selectedIds.Contains(vid.Id);

    private async Task LinkToClipboard(Guid id)
    {
        string link = $"{baseUrl}/Video?id={id}";
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", link);
        //Snackbar.Add("Id in die Zwischenablage kopiert!");
    }

    private async void DeleteVideo(Video video)
    {
        bool? result = await DialogService.ShowMessageBox("Warnung", "Das Video wird permanent gelöscht!", yesText: "Löschen!");
        if(result == true)
        {
            DataRepository.DeleteVideo(video);
            StateHasChanged();
        }
    }

    private async Task OpenEditDialog(Video video)
    {
        var parameters = new DialogParameters { ["video"] = video };
        var dialog = DialogService.Show<EditVideoDialog>("Video editieren", parameters);
        var result = await dialog.Result;

        if(!result.Cancelled)
        {
            
        }
    }

    private async Task OpenCreateSeriesDialog()
    {
        var dialog = DialogService.Show<CreateSeriesDialog>("Neue Serie erstellen");
        var result = await dialog.Result;

        if(!result.Cancelled)
        {
            
        }
    }

    private async Task EmbedToClipboard(Video vid)
    {
        int newHeight = vid.Height;
        int newWidth = vid.Width;

        if(newHeight > 500)
        {
            double factor = 500.0 / (double)newHeight;
            newHeight = 500;
            newWidth = (int)(newWidth * factor);
        }
        if(newWidth > 600)
        {
            double factor = 600.0 / (double)newWidth;
            newWidth = 600;
            newHeight = (int)(newHeight * factor);
        }

        string embed = $"<iframe src=\"{baseUrl}/Video?id={vid.Id}\" title=\"{vid.FileName}\" style=\"width:{newWidth}px;height:{newHeight}px\" frameborder=\"0\" scrolling=\"no\" allowfullscreen></iframe>";
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", embed);
    }

    private async Task<IEnumerable<string>> Search(string val)
    {
        if(string.IsNullOrWhiteSpace(val))
        {
            return list;
        }
        return list.Where(x => x.Contains(val, StringComparison.InvariantCultureIgnoreCase));
    }

    public void Dispose()
    {
        VideoAddedEvent.Notify -= OnVideoUpdate;
    }
}
