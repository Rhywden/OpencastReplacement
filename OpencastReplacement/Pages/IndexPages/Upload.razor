@page "/upload"

@using Microsoft.Extensions.Logging
@using OpencastReplacement.Data
@using OpencastReplacement.Events
@using OpencastReplacement.Models
@using OpencastReplacement.Services
@using System.Security.Claims

@inject ILogger<Upload> Logger
@inject IWebHostEnvironment Environment
@inject FileQueueMonitor FileQueueMonitor
@inject ConversionProgressEvent ConversionProgressEvent
@inject IDataRepository DataRepository
@inject IDialogService DialogService
@inject IMongoConnection MongoConnection
@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IDisposable

<AuthorizeView Roles="admin,lehrer">
    <Authorized>
        <style>
            .drag-drop-zone {
                display: flex;align-items: center;justify-content: center;transition: all .4s;min-height: 200px;
            }
            .drag-drop-input {
                position: absolute;width: 80%;height: 200px;opacity: 0;cursor:pointer;
                z-index:2;
            }
            .drag-enter {
                box-shadow: var(--mud-elevation-10);
            }
            .list{
                padding:2em;min-width:100%;
            }
        </style>

        <MudPaper @ondragenter="@(()=>_dragEnterStyle="drag-enter")"
                  @ondragleave="@(()=>_dragEnterStyle=null)"
                  @ondragend="@(()=>_dragEnterStyle=null)"
                  Class=@("drag-drop-zone "+ _dragEnterStyle)>
            <MudText Typo="Typo.h5">Zum Hochladen hier clicken oder eine Datei per Drag'n'Drop ablegen</MudText>
            <InputFile OnChange="@LoadFiles" multiple class="drag-drop-input" />
        </MudPaper>
        @if (isLoading)
        {
            <MudProgressLinear Color="Color.Primary" Value="@progressInt" Class="my-7" /><MudText>@progressInt%</MudText>
        }

        <MudText Typo="Typo.h4">Hochgeladene Dateien</MudText>

        <MudSimpleTable Hover="false">
            <thead>
                <tr>        
                    <th>Name</th>
                    <th>Größe (Byte)</th>
                    <th>Typ</th>
                    <th>Optionen</th>
                    <th>Tags</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var file in loadedFiles) {
                    <tr @key="IdToKeyUploads(file.Id)">
                        <td>@file.File.Name</td>
                        <td>@file.File.Size</td>
                        <td>@file.File.ContentType</td>
                        <td>
                            <MudCheckBox Label="Öffentlich" T="bool" Checked="file.IsPublic" CheckedChanged="(() => TogglePublic(file))"></MudCheckBox>
                        </td>
                        <td>
                            @foreach(var tag in file.Tags)
                                {
                                    <MudChip @key="tag" Color="Color.Default" OnClose="@(() => OnClose(file, tag))">@tag</MudChip>
                                }
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => OpenAddTagDialog(file))" Size="Size.Small" />
                        </td>
                        <td>
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => StartEncoding(file))" >Start</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>

        <MudText Typo="Typo.h4">Warteschlange für Konvertierungen</MudText>

        <MudSimpleTable Hover="false">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Zustand</th>
                    <th>Fortschritt</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach(var conv in DataRepository.Conversions)
                {
                    <tr @key="IdToKeyConversions(conv.ConversionId)">
                        <td>@conv.Filename</td>
                        <td>
                            @(conv.HasStarted ? "In Bearbeitung" : "Wartet")
                        </td>
                        <td>
                            <MudProgressLinear Color="Color.Primary" Value="Convert.ToInt32(conv.Progress)" Class="my-7" />
                        </td>
                        <td>
                            <MudText>@conv.Progress%</MudText>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </Authorized>
</AuthorizeView>
@code {
    private string? _dragEnterStyle;
    private bool Check480p { get; set; }
    private List<UploadedFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 500;
    private double conversionProgress = 0;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private int progressInt;

    private ClaimsPrincipal? user;

    private string IdToKeyConversions(Guid id)
    {
        return $"conversions_{id}";
    }
    private string IdToKeyUploads(Guid id)
    {
        return $"uploads_{id}";
    }

    private void TogglePublic(UploadedFile file)
    {
        int index = loadedFiles.IndexOf(file);
        loadedFiles[index] = loadedFiles[index] with { IsPublic = !loadedFiles[index].IsPublic };
    }

    async Task OpenAddTagDialog(UploadedFile file)
    {
        var parameters = new DialogParameters { ["id"] = file.Id };
        var dialog = DialogService.Show<TagDialog>("Tag hinzufügen", parameters);
        var result = await dialog.Result;

        if(!result.Cancelled)
        {
            var content = (TagResult)result.Data;
            int index = DataRepository.Tags.FindIndex(t => t.Name.Equals(content.Tag));
            if(index < 0)
            {
                var tag = new Tag
                    {
                        IsPrivate = true,
                        Name = content.Tag,
                        UserId = user?.Identity?.Name ?? string.Empty
                    };
                DataRepository.Tags.Add(tag);
                var coll = MongoConnection.GetTagCollection();
                await coll.InsertOneAsync(tag);
            }
            int fileIndex = loadedFiles.FindIndex(l => l.Id.Equals(content.Id));
            if(fileIndex >= 0)
            {
                var fi = loadedFiles[fileIndex];
                var tags = fi.Tags;
                tags.Add(content.Tag);
                loadedFiles[fileIndex] = fi with { Tags = tags };
            }
        }
    }

    private async Task StartEncoding(UploadedFile file)
    {
        var video = new Video
            {
                FileName = file.File.Name,
                FileSize = file.File.Size,
                Public = file.IsPublic,
                Tags = file.Tags,
                UserId = user?.Identity?.Name ?? string.Empty
            };
        var conversion = new Conversion
            {
                Filename = file.IsPublic ? file.File.Name : "Nicht öffentlich",
                Progress = 0,
                HasStarted = false,
                VideoId = video.Id
            };
        DataRepository.Conversions.Add(conversion);
        await FileQueueMonitor.QueueFileForEncoding(video);
        int index = loadedFiles.FindIndex(l => l.Id.Equals(file.Id));
        if(index >= 0)
        {
            loadedFiles.RemoveAt(index);
        }
    }
    private void OnClose(UploadedFile file, string tag)
    {
        int index = loadedFiles.IndexOf(file);
        var tags = file.Tags;
        tags.Remove(tag);
        var newFile = file with { Tags = tags };
        loadedFiles[index] = newFile;
    }

    protected override async Task OnInitializedAsync()
    {
        ConversionProgressEvent.Notify += OnProgressReport;
        user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        progressInt = 0;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                 var path = Path.Combine(Environment.ContentRootPath,
                    "wwwroot","temp", file.Name);

                await using FileStream writeStream = new(path, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                {
                    totalRead += bytesRead;

                    await writeStream.WriteAsync(buffer, 0, bytesRead);

                    var progressPercent = Decimal.Divide(totalRead, file.Size);
                    progressInt = Decimal.ToInt16(progressPercent * 100);

                    StateHasChanged();
                }

                var fil = new UploadedFile
                    {
                        File = file,
                        IsPublic = true
                    };


                loadedFiles.Add(fil);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }

    public async Task OnProgressReport(ConversionProgressEventArgs args)
    {
        await InvokeAsync(() =>
        {
            conversionProgress = args.Progress;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ConversionProgressEvent.Notify -= OnProgressReport;   
    }
}
